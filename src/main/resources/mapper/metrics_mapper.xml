<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.experdb.configuration.mapper.MatricsMapper">
    <select id="selectMetrics" resultType="hashMap">
        select
          m_id, m_name, m_pg_version_from, m_sql, m_sql_su, coalesce(m_comment, '') as m_comment, m_is_active, m_is_helper,
          date_trunc('second', m_last_modified_on::timestamp) as m_last_modified_on, m_master_only, m_standby_only,
          coalesce(m_column_attrs::text, '') as m_column_attrs, coalesce(ma_metric_attrs::text, '') as ma_metric_attrs
        from
          pgwatch2.metric
          left join
          pgwatch2.metric_attribute on (ma_metric_name = m_name)
        order by
          m_is_active desc, m_name, m_pg_version_from
    </select>
    <insert id="insertMetric" parameterType="hashMap">
        insert into
          pgwatch2.metric (m_name, m_pg_version_from, m_sql, m_sql_su, m_comment, m_is_active, m_is_helper, m_master_only, m_standby_only, m_column_attrs)
        values
          <choose>
            <when test="m_column_attrs != null and !m_column_attrs.equals('')">
              (#{m_name}, ${m_pg_version_from}, #{m_sql}, #{m_sql_su}, #{m_comment}, ${m_is_active}, ${m_is_helper}, ${m_master_only}, ${m_standby_only}, to_json(#{m_column_attrs} ::json));
            </when>
            <otherwise>
              (#{m_name}, ${m_pg_version_from}, #{m_sql}, #{m_sql_su}, #{m_comment}, ${m_is_active}, ${m_is_helper}, ${m_master_only}, ${m_standby_only}, null);
            </otherwise>
          </choose>

          <if test="ma_metric_attrs != null and !ma_metric_attrs.equals('')">
              insert into
                pgwatch2.metric_attribute (ma_metric_name, ma_metric_attrs)
              select
                #{m_name}, #{ma_metric_attrs};
          </if>
    </insert>
    <update id="updateMetric" parameterType="hashMap">
        update
          pgwatch2.metric
        set
          m_name = #{m_name},
          m_pg_version_from = ${m_pg_version_from},
          m_sql = #{m_sql},
          m_sql_su = #{m_sql_su},
          m_comment = #{m_comment},
          m_is_active = ${m_is_active},
          m_is_helper = ${m_is_helper},
          m_master_only = ${m_master_only},
          m_standby_only = ${m_standby_only},
          <choose>
            <when test="m_column_attrs != null and !m_column_attrs.equals('')">
              m_column_attrs = to_json(#{m_column_attrs} ::json),
            </when>
            <otherwise>
              m_column_attrs = null,
            </otherwise>
          </choose>
          m_last_modified_on = now()
        where
          m_id = ${m_id};
          
          <if test="ma_metric_attrs != null and !ma_metric_attrs.equals('')">
              with q_try_upd as (
                  update
                    pgwatch2.metric_attribute
                  set
                    ma_metric_attrs = to_json(#{ma_metric_attrs} ::json),
                    ma_last_modified_on = now()
                  where
                    ma_metric_name = #{m_name}
                  returning *
              )
              insert into pgwatch2.metric_attribute (ma_metric_name, ma_metric_attrs)
              select
                #{m_name},
                to_json(#{ma_metric_attrs} ::json)
              where
                (select count(*) from q_try_upd) = 0;
          </if>
    </update>
    <delete id="deleteMetric" parameterType="hashMap">
      delete from pgwatch2.metric where m_id = ${m_id};

      delete from pgwatch2.metric_attribute
        where ma_metric_name = #{m_name}
        and (select count(*) from pgwatch2.metric where m_name = #{m_name}) = 0
    </delete>
    <select id="selectPresetConfigs" resultType="hashMap">
        select
          pc_name, pc_description, pc_config::text, date_trunc('second', pc_last_modified_on)::text as pc_last_modified_on,
          coalesce((select array_to_string(array_agg(md_unique_name order by md_unique_name), ', ')
            from pgwatch2.monitored_db where md_preset_config_name = pc_name and md_is_enabled
            group by md_preset_config_name), '') as active_dbs
        from
          pgwatch2.preset_config
        order by
          pc_name
    </select>
    <insert id="insertPresetConfigs" parameterType="hashMap">
        insert into
          pgwatch2.preset_config (pc_name, pc_description, pc_config)
        values
          (#{pc_name}, #{pc_description}, to_json(#{pc_config} ::json))
    </insert>
    <update id="updatePresetConfigs" parameterType="hashMap">
        update
          pgwatch2.preset_config
        set
          pc_description = #{pc_description},
          pc_config = to_json(#{pc_config} ::json),
          pc_last_modified_on = now()
        where
          pc_name = #{pc_name}
    </update>
    <delete id="deletePresetConfigs" parameterType="hashMap">
        delete from pgwatch2.preset_config where pc_name = #{pc_name}
    </delete>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.experdb.configuration.mapper.MatricsMapper">
    <select id="selectMetrics" parameterType="hashMap" resultType="hashMap">
        select
          m_id, m_name, m_pg_version_from, m_sql, m_sql_su, coalesce(m_comment, '') as m_comment, m_is_active, m_is_helper,
          date_trunc('second', m_last_modified_on::timestamp) as m_last_modified_on, m_master_only, m_standby_only,
          coalesce(m_column_attrs::text, '') as m_column_attrs, coalesce(ma_metric_attrs::text, '') as ma_metric_attrs
        from
          experdb.metric
          left join
          experdb.metric_attribute on (ma_metric_name = m_name)
        <if test="size > 0"> 
          <trim prefix="WHERE" prefixOverrides="AND"> 
            <if test="m_name != null and m_name !=''"> 
              m_name LIKE CONCAT('%', #{m_name}, '%')
            </if> 
            <if test="m_pg_version_from != null and m_pg_version_from !=''">
              AND m_pg_version_from = #{m_pg_version_from}::integer
            </if> 
            <if test="m_sql != null and m_sql !=''"> 
              AND m_sql LIKE CONCAT('%', #{m_sql}, '%')
            </if> 
            <if test="m_sql_su != null and m_sql_su !=''"> 
              AND m_sql_su LIKE CONCAT('%', #{m_sql_su}, '%')
            </if> 
            <if test="m_comment != null and m_comment !=''"> 
              AND m_comment LIKE CONCAT('%', #{m_comment}, '%')
            </if> 
            <if test="ma_metric_attrs != null and ma_metric_attrs !=''"> 
              AND ma_metric_attrs::text LIKE CONCAT('%', #{ma_metric_attrs}, '%')
            </if> 
          </trim> 
        </if> 
        order by
          m_is_active desc, m_name, m_pg_version_from
    </select>
    <select id="selectMetricsDetail" parameterType="hashMap" resultType="hashMap">
        select
          m_id, m_name, m_pg_version_from, m_sql, m_sql_su, coalesce(m_comment, '') as m_comment, m_is_active, m_is_helper,
          date_trunc('second', m_last_modified_on::timestamp) as m_last_modified_on, m_master_only, m_standby_only,
          coalesce(m_column_attrs::text, '') as m_column_attrs, coalesce(ma_metric_attrs::text, '') as ma_metric_attrs
        from
          experdb.metric
          left join
          experdb.metric_attribute on (ma_metric_name = m_name)
        where
          m_id = #{m_id} :: integer
        order by
          m_is_active desc, m_name, m_pg_version_from
    </select>
    <insert id="insertMetric" parameterType="hashMap">
        insert into
          experdb.metric (m_name, m_pg_version_from, m_sql, m_sql_su, m_comment, m_is_active, m_is_helper, m_master_only, m_standby_only, m_column_attrs)
        values
          <choose>
            <when test="m_column_attrs != null and !m_column_attrs.equals('')">
              (#{m_name}, ${m_pg_version_from}, #{m_sql}, #{m_sql_su}, #{m_comment}, ${m_is_active}, ${m_is_helper}, ${m_master_only}, ${m_standby_only}, to_json(#{m_column_attrs} ::json));
            </when>
            <otherwise>
              (#{m_name}, ${m_pg_version_from}, #{m_sql}, #{m_sql_su}, #{m_comment}, ${m_is_active}, ${m_is_helper}, ${m_master_only}, ${m_standby_only}, null);
            </otherwise>
          </choose>

          <if test="ma_metric_attrs != null and !ma_metric_attrs.equals('')">
              insert into
                experdb.metric_attribute (ma_metric_name, ma_metric_attrs)
              select
                #{m_name}, #{ma_metric_attrs};
          </if>
    </insert>
    <update id="updateMetric" parameterType="hashMap">
        update
          experdb.metric
        set
          m_name = #{m_name},
          m_pg_version_from = ${m_pg_version_from},
          m_sql = #{m_sql},
          m_sql_su = #{m_sql_su},
          m_comment = #{m_comment},
          m_is_active = ${m_is_active},
          m_is_helper = ${m_is_helper},
          m_master_only = ${m_master_only},
          m_standby_only = ${m_standby_only},
          <choose>
            <when test="m_column_attrs != null and !m_column_attrs.equals('')">
              m_column_attrs = to_json(#{m_column_attrs} ::json),
            </when>
            <otherwise>
              m_column_attrs = null,
            </otherwise>
          </choose>
          m_last_modified_on = now()
        where
          m_id = ${m_id};
          
          <if test="ma_metric_attrs != null and !ma_metric_attrs.equals('')">
              with q_try_upd as (
                  update
                    experdb.metric_attribute
                  set
                    ma_metric_attrs = to_json(#{ma_metric_attrs} ::json),
                    ma_last_modified_on = now()
                  where
                    ma_metric_name = #{m_name}
                  returning *
              )
              insert into experdb.metric_attribute (ma_metric_name, ma_metric_attrs)
              select
                #{m_name},
                to_json(#{ma_metric_attrs} ::json)
              where
                (select count(*) from q_try_upd) = 0;
          </if>
    </update>
    <delete id="deleteMetric" parameterType="hashMap">
      delete from experdb.metric where m_id = ${m_id};

      delete from experdb.metric_attribute
        where ma_metric_name = #{m_name}
        and (select count(*) from experdb.metric where m_name = #{m_name}) = 0
    </delete>
</mapper>